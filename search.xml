<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo搭建博客步骤详解</title>
    <url>/2021/06/21/Hexo-BuildABlog/</url>
    <content><![CDATA[<h1 id="Hexo-搭建博客步骤详解（Windows）"><a href="#Hexo-搭建博客步骤详解（Windows）" class="headerlink" title="Hexo 搭建博客步骤详解（Windows）"></a>Hexo 搭建博客步骤详解（Windows）</h1><h2 id="一、安装相关程序"><a href="#一、安装相关程序" class="headerlink" title="一、安装相关程序"></a>一、安装相关程序</h2><p><strong>1. 安装 Node.js</strong></p>
<ul>
<li>前往 Nodejs 官网<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li>
<li>下载安装 Node.js LTS</li>
<li>注：安装时会自动安装 NPM 包管理器。Hexo 是基于 Nodejs 的</li>
</ul>
<p><strong>2. 确认安版本</strong></p>
<ul>
<li>Win+R 运行 CMD</li>
<li>查看 node 版本。执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<ul>
<li>查看 npm 版本。执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p><strong>3. 安装 CNPM 管理器</strong></p>
<ul>
<li>利用 NPM 安装淘宝镜像源的 CNPM。执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<ul>
<li>查看 CNPM 版本。执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>

<p><strong>4. 安装 hexo 框架</strong></p>
<ul>
<li>执行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<ul>
<li>查看 hexo 版本。执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<h2 id="二、搭建本地博客环境"><a href="#二、搭建本地博客环境" class="headerlink" title="二、搭建本地博客环境"></a>二、搭建本地博客环境</h2><p><strong>1. 创建 blog 目录</strong></p>
<ul>
<li>将 CMD 路径切换至目标位置<blockquote>
<p>例：切换至 D 盘则执行 D：</p>
</blockquote>
</li>
<li>创建 blog 目录。执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure>

<ul>
<li>进入 blog 目录。执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd blog</span><br></pre></td></tr></table></figure>

<p><strong>2. 创建及本地运行博客</strong></p>
<ul>
<li>使用管理员权限初始化博客。执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo hexo init</span><br></pre></td></tr></table></figure>

<p>注：需等待一段时间来安装</p>
<ul>
<li>启动本地博客服务。执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<ul>
<li>本地访问地址<br/><blockquote>
<p><a href="http://localhost:4000/">http://localhost:4000/</a></p>
</blockquote>
</li>
</ul>
<h2 id="三、编写博客文章"><a href="#三、编写博客文章" class="headerlink" title="三、编写博客文章"></a>三、编写博客文章</h2><p><strong>1. 使用 CMD 编写</strong></p>
<ul>
<li>创建新的文章。执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new 文件名称</span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建成功会提示文件位置<br/></p>
<blockquote>
<p>如：D:\Blog\source_posts\文件名称.md</p>
</blockquote>
</li>
<li><p>切换当前位置到_posts 目录。执行：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd source\_posts\</span><br></pre></td></tr></table></figure>

<ul>
<li>编辑创建的 MD 文档。执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim 文件名称.md</span><br></pre></td></tr></table></figure>

<p><strong>2. 使用其他软件编辑博客文档</strong></p>
<ul>
<li>写好的文档必须放在\Blog\source_posts\目录下</li>
<li>文件类型必须是”.MD”，所以需要用 Markdown 的格式来编写才能呈现效果</li>
</ul>
<h2 id="四、部署GitHub"><a href="#四、部署GitHub" class="headerlink" title="四、部署GitHub"></a>四、部署GitHub</h2><p><strong>1. 在Github创建一个新的仓库 YourGithubName.github.io</strong></p>
<p><strong>2.在Blog目录下安装Git部署插件。执行：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p><strong>3.设置Blog目录下的_config.yml文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置文件最底部</span><br><span class="line"></span><br><span class="line">#Deployment</span><br><span class="line">##Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">	deploy:</span><br><span class="line">  	type: git</span><br><span class="line"> 		repo: https://github.com/YourGithubName/YourGithubName.github.io.git</span><br><span class="line">  	branch: master</span><br></pre></td></tr></table></figure>
<p><strong>4.部署到远端。执行：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>根据提示输入Github账号密码进行登录，等待完成后即可访问<a href="https://yourgithubname.github.io查看/">https://YourGithubName.github.io查看</a></p>
<h2 id="五、常用命令汇总"><a href="#五、常用命令汇总" class="headerlink" title="五、常用命令汇总"></a>五、常用命令汇总</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">node -v</td>
<td align="left">查看 node 版本</td>
</tr>
<tr>
<td align="left">npm -v</td>
<td align="left">查看 npm 版本</td>
</tr>
<tr>
<td align="left">cnpm -v</td>
<td align="left">查看 cnpm 版本</td>
</tr>
<tr>
<td align="left">hexo -v</td>
<td align="left">查看 hexo 版本</td>
</tr>
<tr>
<td align="left">mkdir “”</td>
<td align="left">创建目录</td>
</tr>
<tr>
<td align="left">cd “”</td>
<td align="left">切换路径</td>
</tr>
<tr>
<td align="left">hexo clean</td>
<td align="left">清理博客</td>
</tr>
<tr>
<td align="left">hexo generate</td>
<td align="left">生成</td>
</tr>
<tr>
<td align="left">hexo server</td>
<td align="left">启动博客</td>
</tr>
<tr>
<td align="left">hexo deploy</td>
<td align="left">部署到远端（如 GitHub）</td>
</tr>
</tbody></table>
<hr>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/2021/07/09/AboutMe/</url>
    <content><![CDATA[<h1 id="我与这个博客"><a href="#我与这个博客" class="headerlink" title="我与这个博客"></a>我与这个博客</h1><hr>
<p> &ensp;&ensp;&ensp;&ensp;  <em><strong>Cooper</strong></em>，一个喜欢关注新奇技术的程序猴🤪，目前位于魔都上海，2019开始正式进入这个圈子。一直以来想做一个自己的博客的，现在终于动手实现了。<br><br> &ensp;&ensp;&ensp;&ensp;推动我来做这件事的主要原因，还是在工作过程中逐渐意识到有些东西是需要记录下来的，无论是爬过的坑，还是自己的成果，动手去记录下来，在以后也是一种回忆。我的文章有纯原创也有基于其他博主的文章整理出的，如果你对我的博客或我的文章有什么建议或意见，欢迎来联系我。</p>
<p><strong>你可以在这里找到我</strong>：</p>
<ul>
<li><p>GitHub：<a href="https://github.com/You-zx">https://github.com/You-zx</a></p>
</li>
<li><p>QQ：<a href="https://shang.qq.com//open_webaio.html">877056668</a></p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>关于我</category>
      </categories>
      <tags>
        <tag>关于我</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建图床</title>
    <url>/2021/11/04/ImageHosting/</url>
    <content><![CDATA[<h1 id="PicGo-Gitee搭建图床"><a href="#PicGo-Gitee搭建图床" class="headerlink" title="PicGo+Gitee搭建图床"></a>PicGo+Gitee搭建图床</h1><h2 id="1-安装PicGo"><a href="#1-安装PicGo" class="headerlink" title="1. 安装PicGo"></a>1. 安装PicGo</h2><ul>
<li>前往<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo官网</a>下载PicGo</li>
<li>注意：windwos 选择.exe，mac 系统选择dmg下载。</li>
</ul>
<h2 id="2-打开PicGo"><a href="#2-打开PicGo" class="headerlink" title="2. 打开PicGo"></a>2. 打开PicGo</h2><p><img src="https://gitee.com/you-zx/blog-image/raw/master/img/picgo.PNG"></p>
<h2 id="3-安装Gitee插件"><a href="#3-安装Gitee插件" class="headerlink" title="3.安装Gitee插件"></a>3.安装Gitee插件</h2><ul>
<li>在插件设置中搜索gitee<br><img src="https://gitee.com/you-zx/blog-image/raw/master/img/picgo2.PNG"></li>
<li>安装gitee-uploader 1.1.2</li>
<li>注意：安装前需要保证自己电脑已经安装<a href="https://nodejs.org/en/">Node.js</a></li>
</ul>
<h2 id="4-创建Gitee图床仓库"><a href="#4-创建Gitee图床仓库" class="headerlink" title="4.创建Gitee图床仓库"></a>4.创建Gitee图床仓库</h2><ul>
<li>注册并登陆Gitee</li>
<li>新建一个仓库<br><img src="https://gitee.com/you-zx/blog-image/raw/master/img/giteeclub.png"></li>
<li>将仓库设为公开的</li>
<li>只创建master主分支</li>
<li>其他信息自行填写，之后提交即可</li>
</ul>
<h2 id="5-配置PicGo"><a href="#5-配置PicGo" class="headerlink" title="5.配置PicGo"></a>5.配置PicGo</h2><ul>
<li>在PicGo的图床设置中找到gitee<br><img src="https://gitee.com/you-zx/blog-image/raw/master/img/picgo3.png"></li>
<li>repo：用户名/仓库名称</li>
<li>branch：master</li>
<li>token：Gitee的私人令牌</li>
<li>customPath：选年月</li>
<li>customURL：不用填</li>
</ul>
<h2 id="私人令牌创建方法"><a href="#私人令牌创建方法" class="headerlink" title="私人令牌创建方法"></a>私人令牌创建方法</h2><p><img src="https://gitee.com/you-zx/blog-image/raw/master/img/giteetoken.png"></p>
<ul>
<li>点击头像—&gt;设置—&gt;私人令牌—&gt;生成新令牌<br><img src="https://gitee.com/you-zx/blog-image/raw/master/img/Giteetoken2.png"></li>
<li>勾选一项即可</li>
<li><strong>注意：私人令牌生成后必须自己妥善保存，关闭后无法重新查看</strong></li>
</ul>
]]></content>
      <categories>
        <category>搭建图床</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础语法规范</title>
    <url>/2021/07/03/Python-BasicSpecification/</url>
    <content><![CDATA[<h1 id="Python基础语法"><a href="#Python基础语法" class="headerlink" title="Python基础语法"></a>Python基础语法</h1><h2 id="基础要点"><a href="#基础要点" class="headerlink" title="基础要点"></a>基础要点</h2><p><strong>语法块:</strong></p>
<p> 用缩进（四个空格）而不是分号、花括号等符号来标记。因此，行首的空格不能随意书写。</p>
<p><strong>注释</strong></p>
<p>行内用<code>#</code>号，行间注释写在两组连续三单引号<code>’’’</code> <code>’’’</code>之间：</p>
<p><strong>续行</strong></p>
<p>行尾输入一个反斜杠<code>\</code>加一个空格，再换行。如果行尾语法明显未完成（比如以逗号结尾），可以直接续行。</p>
<p><strong>打印与输入</strong></p>
<p>函数 <code>print()</code> 与 <code>input()</code>，注意 <code>print()</code> 的 <code>sep</code> 与 <code>end</code> 参数。</p>
<p><strong>变量</strong></p>
<p>无需指定变量类型，也不需要提前声明变量。</p>
<p><strong>删除变量</strong></p>
<p><code>del()</code></p>
<p><strong>赋值变量</strong></p>
<p>直接将变量a赋值给b，有时仅仅复制了一个“引用”。此后 b 与 a 的改动仍会互相影响。必要时使用 a <code>is</code> b 来判断是否同址。</p>
<p><strong>模块</strong></p>
<p>通过 <code>import pandas</code> 的方式加载模块（或者 <code>import pandas as pd</code>），并用形如 <code>pandas.DataFrame</code>（或 <code>pd.DataFrame</code>）的方式调用模块内的方法。也可以使用 <code>from pandas import DataFrame</code> 的方式，这样在下文可以直接使用 <code>DataFrame</code> 作为调用名。</p>
<p><strong>帮助</strong></p>
<p>配合使用 <code>dir()</code> 与<code> help()</code> 命令；其中前者是输出变量所有的成员。</p>
<h2 id="一、标识符规定"><a href="#一、标识符规定" class="headerlink" title="一、标识符规定"></a>一、标识符规定</h2><p>1.第一个字符必须是字母或下划线<code>_</code>，剩下的字符可以是字母和数字或下划线<br/></p>
<ul>
<li>单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 <code>from xxx import *</code> 而导入</li>
<li>双下划线开头的 _foo 代表类的私有成员</li>
<li>双下划线开头和结尾的 <strong>foo</strong> 代表 Python 里特殊方法专用的标识，如 <code>__init__()</code> 代表类的构造函数</li>
</ul>
<p>2.区分大小写<br>3.不能是 Python 的关键字，例如 <code>def、class</code><br>4.在同一行显示多条语句需要使用分号<code>;</code> 隔开。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#输入</span><br><span class="line">print(&quot;hello&quot;);print(&quot;world&quot;);</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure>


<h2 id="二、关键字"><a href="#二、关键字" class="headerlink" title="二、关键字"></a>二、关键字</h2><table>
<thead>
<tr>
<th>and</th>
<th>exec</th>
<th>not</th>
<th>assert</th>
<th>ambda</th>
</tr>
</thead>
<tbody><tr>
<td>finally</td>
<td>or</td>
<td>break</td>
<td>for</td>
<td>yield</td>
</tr>
<tr>
<td>ass</td>
<td>class</td>
<td>from</td>
<td>print</td>
<td>except</td>
</tr>
<tr>
<td>continue</td>
<td>global</td>
<td>raise</td>
<td>def</td>
<td>is</td>
</tr>
<tr>
<td>if</td>
<td>return</td>
<td>del</td>
<td>import</td>
<td>with</td>
</tr>
<tr>
<td>try</td>
<td>elif</td>
<td>in</td>
<td>while</td>
<td>else</td>
</tr>
</tbody></table>
<h2 id="三、缩进"><a href="#三、缩进" class="headerlink" title="三、缩进"></a>三、缩进</h2><ul>
<li>Python 用缩进层次来组织代码块，而约定一个缩进是用‘4个空格’来表示，请务必遵守约定俗成的习惯，坚持使用4个空格的缩进。</li>
<li>如果是用文本编辑器或者 IDE，可以把 Tab 自动转换为4个空格，然后用 tab 键来使用缩进，确保不混用 Tab 和空格。</li>
<li>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#正确写法</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Wrong&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Retry&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#错误写法</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Wrong&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;Retry&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="四、多行语句"><a href="#四、多行语句" class="headerlink" title="四、多行语句"></a>四、多行语句</h2><p>Python 语句中一般以新行作为为语句的结束符。<br>但是我们可以使用<code>\</code>将一行的语句分为多行显示，如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure>
<p>语句由<code>[]</code> <code>&#123;&#125;</code>或<code>()</code>包裹就不需要使用多行连接符。如下实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">days = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br></pre></td></tr></table></figure>


<h2 id="五、引号"><a href="#五、引号" class="headerlink" title="五、引号"></a>五、引号</h2><p>Python 以<code>&#39;</code> <code>&quot;</code> <code>&quot;&quot;&quot;</code> <code>&#39;&#39;&#39;</code>来表示字符串，引号的开始与结束必须的相同类型的。<br>其中<code>&quot;&quot;&quot;</code> <code>&#39;&#39;&#39;</code>可以也是编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#输入</span></span><br><span class="line">Data=<span class="string">&#x27;123&#x27;</span>;<span class="built_in">print</span>(Data)</span><br><span class="line">Data1=<span class="string">&quot;111&quot;</span>;<span class="built_in">print</span>(Data1)</span><br><span class="line">Data2=<span class="string">&#x27;&#x27;&#x27;222&#x27;&#x27;&#x27;</span>;<span class="built_in">print</span>(Data2)</span><br><span class="line">Data3=<span class="string">&quot;&quot;&quot;33</span></span><br><span class="line"><span class="string">3&quot;&quot;&quot;</span>;<span class="built_in">print</span>(Data3)</span><br><span class="line">Data4=<span class="string">&quot;混用&#x27;test&#x27;&quot;</span>;<span class="built_in">print</span>(Data4)</span><br><span class="line">Data5=<span class="string">&#x27;混用“test”&#x27;</span>;<span class="built_in">print</span>(Data5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">222</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">混用<span class="string">&#x27;test&#x27;</span></span><br><span class="line">混用“test”</span><br></pre></td></tr></table></figure>


<h2 id="六、注释"><a href="#六、注释" class="headerlink" title="六、注释"></a>六、注释</h2><ul>
<li>注释是以<code>#</code>开头的语句，一般体现为独立的一行或写在行尾。</li>
<li>Python 没有块注释，因此多行注释也是使用<code>#</code></li>
<li>行间注释使用两组连续的三单引号<code>&#39;&#39;&#39;</code>包裹注释内容<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这是独立一行注释</span></span><br><span class="line"><span class="comment">#在代码中不要使用无意义的注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, Word!&quot;</span>);<span class="string">&#x27;&#x27;&#x27;输出语句1&#x27;&#x27;&#x27;</span>; <span class="built_in">print</span>(<span class="string">&quot;Hello, Python!&quot;</span>);<span class="comment">#输出语句2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Hello, Word!</span><br><span class="line">Hello, Python!</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="七、空格和空行"><a href="#七、空格和空行" class="headerlink" title="七、空格和空行"></a>七、空格和空行</h2><ul>
<li>为了让代码看起来更清晰，具有更好的可读性，有时会在代码中使用空格和空行。空格或者空行与代码缩进不同，它并不是 Python 语法的一部分。</li>
<li>书写时不插入空格或者空行，Python 解释器运行也不会出错。但是空格或者空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。例：</li>
</ul>
<p>1.在变量赋值时添加空格。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello = <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure>
<p>2.类成员函数之间空一行，模块级函数和类定义之间空两行；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">         </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="八、输出"><a href="#八、输出" class="headerlink" title="八、输出"></a>八、输出</h2><p>在使用 <code>print()</code> 输出时默认是换行的，如果要实现不换行需要加上<code>end</code>参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="string">&quot;a&quot;</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(y, end=<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">a/b/</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用缩进、空格、换行等规定语法一方面可以保障程序运行正常，也增加了程序本身的阅读性。养成良好的编码习惯，非常的重要。</p>
<blockquote>
<p><strong>声明</strong>:</p>
<ul>
<li>本文由博主根据自己的理解习惯在原有文章整理出的简洁版文档（原文太多错别字）</li>
<li>原文出自：<a href="https://mp.weixin.qq.com/s?__biz=MzU1NDk2MzQyNg==&amp;mid=2247483697&amp;idx=1&amp;sn=15a0eba4e9aa3b13ebf896656500e5c2&amp;chksm=fbdad9bcccad50aa2078f0fca0fc276db869cd775ddb4eafd2c3e2ab523c4b178397c1ac7ee8&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzU1NDk2MzQyNg==&amp;mid=2247483697&amp;idx=1&amp;sn=15a0eba4e9aa3b13ebf896656500e5c2&amp;chksm=fbdad9bcccad50aa2078f0fca0fc276db869cd775ddb4eafd2c3e2ab523c4b178397c1ac7ee8&amp;scene=21#wechat_redirect</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLServer中NVARCHAR与VARCHAR</title>
    <url>/2022/01/27/sqlvarcharnvarchar/</url>
    <content><![CDATA[<h2 id="1、区别"><a href="#1、区别" class="headerlink" title="1、区别"></a>1、区别</h2><ul>
<li>SQLserver 默认排序规则为<code>Chinese_PRC_CI_AS</code>，此排序规则使用<code>varchar</code>类型来可以“正常存取”存放中文字符以及一些东南亚国家的字符，同时<code>varchar</code>类型在存放英文字符和数字时比<code>nvarchar</code>节省一半的存储空间，但在遇到特殊字符或生僻字时，会产生问题。</li>
</ul>
<blockquote>
<blockquote>
<p><code>Chinese_PRC</code>：针对大陆简体字 UNICODE 的排序规则。<br/><br><code>CI</code>：CaseSensitivity：指定不区分大小写。<br/><br><code>AS</code>：AccentSensitivity：指定区分重音。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p><code>VARCHAR</code>类型的列使用ANSI编码，也即GBK存储数据（不能存储emoji表情）。<br/><br><code>NVARCHAR</code>类型的列使用UTF-16编码存储数据（能存储所有Unicode字符，包含emoji表情）。</p>
</blockquote>
</blockquote>
<ul>
<li>例如：我是cooper</li>
</ul>
<p><code>VARCHAR</code>字段占2×2+6=10个字节的存储空间。</p>
<p><code>NVARCHAR</code>字段占8×2=16个字节的存储空间。</p>
<h2 id="2、应用"><a href="#2、应用" class="headerlink" title="2、应用"></a>2、应用</h2><ol>
<li>写入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE test (</span><br><span class="line">	[name] [varchar](50) NULL,</span><br><span class="line">	[type] [nvarchar](50) NULL</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">INSERT INTO test (name, type)</span><br><span class="line">VALUES (N&#x27;?&#x27;, N&#x27;?&#x27;)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>插入的字符为<a href="https://baike.baidu.com/item/%E5%95%86%E6%A0%87/691568?fromtitle=%C2%AE&fromid=15198122&fr=aladdin">商标上的?</a>。</li>
<li><code>N</code>表示单引号中的字符串使用的是Unicode编码，我们sqlserver引擎会用Unicode的方式去解析内容，而不是用GBK编码的方式。</li>
</ul>
<ol start="2">
<li>查询<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> TestDemo <span class="keyword">WHERE</span> order_type <span class="keyword">LIKE</span> <span class="string">&#x27;%?%&#x27;</span><span class="comment">--不用N</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> TestDemo <span class="keyword">WHERE</span> order_type <span class="keyword">LIKE</span> N<span class="string">&#x27;%?%&#x27;</span><span class="comment">--用N</span></span><br></pre></td></tr></table></figure>
查询结果如下：<br><img src="https://gitee.com/you-zx/blog-image/raw/master/img/SQL-N-varchar.jpg"></li>
</ol>
<p><strong>总结</strong></p>
<ol>
<li>数据库表设计时需要注意是否可能存入特殊字符与生僻字</li>
<li>建议使用 NVARCHAR 来存放非英文字符数据，理由：</li>
</ol>
<ul>
<li>VARCHAR 类型存放特殊字符或生僻字时存在乱码或字符被转变的问题</li>
<li>对于中文字符，使用 VARCHAR 和 NVARCHAR 消耗同样的空间，对于英文字符，使用 VARCHAR 比 NVARCHAR 节省一倍的空间，但随着磁盘成本越来越低，其提升的性能和节省的成本有限。（例外：如果数据中存在大量英文字符和少量非英文字符，则可以结合实际情况考虑 VARCHAR 类型）</li>
<li>使用 VARCHAR 存放非英文字符时，容易生成错误的预估值，尤其在执行 LIKE 这类匹配的预估时。</li>
</ul>
]]></content>
      <categories>
        <category>NVARCHAR与VARCHAR</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
</search>
